// Import the page's CSS. Webpack will know what to do with it.
import "../stylesheets/app.css";

// Import libraries we need.
import { default as Web3} from 'web3';
import { keccak_256 } from 'js-sha3';
import { default as contract } from 'truffle-contract'

// Import our contract artifacts and turn them into usable abstractions.
import identity_artifacts from '../../build/contracts/Identity.json'

// MetaCoin is our usable abstraction, which we'll use through the code below.
var IdentityProject = contract(identity_artifacts);

// The following code is simple to show off interacting with your contracts.
// As your needs grow you will likely need to change its form and structure.
// For application bootstrapping, check out window.addEventListener below.
var accounts;
var account;
//////

var country_arr = new Array("Afghanistan", "Albania", "Algeria", "American Samoa", "Angola", "Anguilla", "Antartica", "Antigua and Barbuda", "Argentina", "Armenia", "Aruba", "Ashmore and Cartier Island", "Australia", "Austria", "Azerbaijan", "Bahamas", "Bahrain", "Bangladesh", "Barbados", "Belarus", "Belgium", "Belize", "Benin", "Bermuda", "Bhutan", "Bolivia", "Bosnia and Herzegovina", "Botswana", "Brazil", "British Virgin Islands", "Brunei", "Bulgaria", "Burkina Faso", "Burma", "Burundi", "Cambodia", "Cameroon", "Canada", "Cape Verde", "Cayman Islands", "Central African Republic", "Chad", "Chile", "China", "Christmas Island", "Clipperton Island", "Cocos (Keeling) Islands", "Colombia", "Comoros", "Congo, Democratic Republic of the", "Congo, Republic of the", "Cook Islands", "Costa Rica", "Cote d'Ivoire", "Croatia", "Cuba", "Cyprus", "Czeck Republic", "Denmark", "Djibouti", "Dominica", "Dominican Republic", "Ecuador", "Egypt", "El Salvador", "Equatorial Guinea", "Eritrea", "Estonia", "Ethiopia", "Europa Island", "Falkland Islands (Islas Malvinas)", "Faroe Islands", "Fiji", "Finland", "France", "French Guiana", "French Polynesia", "French Southern and Antarctic Lands", "Gabon", "Gambia, The", "Gaza Strip", "Georgia", "Germany", "Ghana", "Gibraltar", "Glorioso Islands", "Greece", "Greenland", "Grenada", "Guadeloupe", "Guam", "Guatemala", "Guernsey", "Guinea", "Guinea-Bissau", "Guyana", "Haiti", "Heard Island and McDonald Islands", "Holy See (Vatican City)", "Honduras", "Hong Kong", "Howland Island", "Hungary", "Iceland", "India", "Indonesia", "Iran", "Iraq", "Ireland", "Ireland, Northern", "Israel", "Italy", "Jamaica", "Jan Mayen", "Japan", "Jarvis Island", "Jersey", "Johnston Atoll", "Jordan", "Juan de Nova Island", "Kazakhstan", "Kenya", "Kiribati", "Korea, North", "Korea, South", "Kuwait", "Kyrgyzstan", "Laos", "Latvia", "Lebanon", "Lesotho", "Liberia", "Libya", "Liechtenstein", "Lithuania", "Luxembourg", "Macau", "Macedonia, Former Yugoslav Republic of", "Madagascar", "Malawi", "Malaysia", "Maldives", "Mali", "Malta", "Man, Isle of", "Marshall Islands", "Martinique", "Mauritania", "Mauritius", "Mayotte", "Mexico", "Micronesia, Federated States of", "Midway Islands", "Moldova", "Monaco", "Mongolia", "Montserrat", "Morocco", "Mozambique", "Namibia", "Nauru", "Nepal", "Netherlands", "Netherlands Antilles", "New Caledonia", "New Zealand", "Nicaragua", "Niger", "Nigeria", "Niue", "Norfolk Island", "Northern Mariana Islands", "Norway", "Oman", "Pakistan", "Palau", "Panama", "Papua New Guinea", "Paraguay", "Peru", "Philippines", "Pitcaim Islands", "Poland", "Portugal", "Puerto Rico", "Qatar", "Reunion", "Romainia", "Russia", "Rwanda", "Saint Helena", "Saint Kitts and Nevis", "Saint Lucia", "Saint Pierre and Miquelon", "Saint Vincent and the Grenadines", "Samoa", "San Marino", "Sao Tome and Principe", "Saudi Arabia", "Scotland", "Senegal", "Seychelles", "Sierra Leone", "Singapore", "Slovakia", "Slovenia", "Solomon Islands", "Somalia", "South Africa", "South Georgia and South Sandwich Islands", "Spain", "Spratly Islands", "Sri Lanka", "Sudan", "Suriname", "Svalbard", "Swaziland", "Sweden", "Switzerland", "Syria", "Taiwan", "Tajikistan", "Tanzania", "Thailand", "Tobago", "Toga", "Tokelau", "Tonga", "Trinidad", "Tunisia", "Turkey", "Turkmenistan", "Tuvalu", "Uganda", "Ukraine", "United Arab Emirates", "United Kingdom", "Uruguay", "USA", "Uzbekistan", "Vanuatu", "Venezuela", "Vietnam", "Virgin Islands", "Wales", "Wallis and Futuna", "West Bank", "Western Sahara", "Yemen", "Yugoslavia", "Zambia", "Zimbabwe");
// var days = new Array("1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31");
// var months = new Array("January", "February", "March", "April", "May", "June","July", "August", "September", "October", "November", "December");
// var years = new Array("1900", "1901", "1902", "1903", "1904", "1905", "1906", "1907", "1908", "1909", "1910", "1911", "1912", "1913", "1914", "1915", "1916", "1917", "1918", "1919", "1920", "1921", "1922", "1923", "1924", "1925", "1926", "1927", "1928", "1929", "1930", "1931", "1932", "1933", "1934", "1935", "1936", "1937", "1938", "1939", "1940", "1941", "1942", "1943", "1944", "1945", "1946", "1947", "1948", "1949", "1950", "1951", "1952", "1953", "1954", "1955", "1956", "1957", "1958", "1959", "1960", "1961", "1962", "1963", "1964", "1965", "1966", "1967", "1968", "1969", "1970", "1971", "1972", "1973", "1974", "1975", "1976", "1977", "1978", "1979", "1980", "1981", "1982", "1983", "1984", "1985", "1986", "1987", "1988", "1989", "1990", "1991", "1992", "1993", "1994", "1995", "1996", "1997", "1998");

//////////////////

// var crypto = require('crypto'), 
//     algorithm = 'aes-256-ctr', 
//     password = "Alberto1234";

// function encrypt(text){
//   var cipher = crypto.createCipher(algorithm,password)
//   var crypted = cipher.update(text,'utf8','hex')
//   //console.log(crypted);
//   crypted += cipher.final('hex');
//   return crypted;
// }
 
// function decrypt(text){
//   var decipher = crypto.createDecipher(algorithm,password)
//   var dec = decipher.update(text,'hex','utf8')
//   dec += decipher.final('utf8');
//   return dec;
// }
 

//var hw = encrypt("hello world");
//var sw = encrypt("algo");
// outputs hello world

//console.log(hw);
//console.log(decrypt(hw));
//console.log(sw);
//console.log(decrypt(sw));
/////

window.App = {

  openTab : function(evt, tabName) {
    // Declare all variables
    var i, tabcontent, tablinks;

    // Get all elements with class="tabcontent" and hide them
    tabcontent = document.getElementsByClassName("tabcontent");
    for (i = 0; i < tabcontent.length; i++) {
      tabcontent[i].style.display = "none";
    }

    // Get all elements with class="tablinks" and remove the class "active"
    tablinks = document.getElementsByClassName("tablinks");
    for (i = 0; i < tablinks.length; i++) {
      tablinks[i].className = tablinks[i].className.replace(" active", "");
    }

    // Show the current tab, and add an "active" class to the button that opened the tab
    document.getElementById(tabName).style.display = "block";
    evt.currentTarget.className += " active";

  },

  selectCountries: function(countryElementId){

  // given the id of the <select> tag as function argument, it inserts <option> tags
  var countryElement = document.getElementById(countryElementId);
  countryElement.length=0;
  countryElement.selectedIndex = 0;
  for (var i=0; i<country_arr.length; i++) {
    countryElement.options[countryElement.length] = new Option(country_arr[i],country_arr[i]);
  }
  // Assigned all countries. Now assign event listener for the states.
},
  cifrador : function(message,text){
  	var crypto = require('crypto'), 
    algorithm = 'aes-256-ctr', 
    password = message;

  	var cipher = crypto.createCipher(algorithm,password);
  	var crypted = cipher.update(text,'utf8','hex');
		//console.log(crypted);
		crypted += cipher.final('hex');
		return crypted;
},

	descifrador : function(message,text){
		var crypto = require('crypto'), 
    algorithm = 'aes-256-ctr', 
    password = message;

		var decipher = crypto.createDecipher(algorithm,password);
		var dec = decipher.update(text,'hex','utf8');
		dec += decipher.final('utf8');
		return dec;
},

descifradorString : function(message,text){
		var crypto = require('crypto'), 
    algorithm = 'aes-256-ctr', 
    password = message;

		var decipher = crypto.createDecipher(algorithm,password);
		var dec = decipher.update(text,'utf8','utf8');
		dec += decipher.final('utf8');
		return dec;
},

  verifyPassword : function(password,verifypassword){
    var self = this;
    this.timerPassword();

    if(keccak_256(document.getElementById(password).value) === keccak_256(document.getElementById(verifypassword).value)) {
      document.getElementById(password).disabled = true;
      

      var encrypted = self.cifrador(keccak_256(document.getElementById(password).value),'hola');
      console.log(encrypted);
      console.log(self.descifrador(keccak_256(document.getElementById(password).value),encrypted));

      document.getElementById(verifypassword).disabled = true;
      document.getElementById('passwordButton').disabled = true;
      
      self.setStatus('passwordStatus','Your password will expire in 5 minutes for your secure. Save it!');
      self.enableAddButtons();
      self.enableShowButtons();
      self.enableInputbox();
      }else{
        
      }
    
      },


     timerPassword : function(){
        var self  = this;
        var countDownDate = new Date().getTime()+300000;

      // Update the count down every 1 second
        var x = setInterval(function() {
        // Get todays date and time
        var now = new Date().getTime();
        // Find the distance between now an the count down date
        var distance = countDownDate - now;
        // Time calculations for days, hours, minutes and seconds
        var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
        var seconds = Math.floor((distance % (1000 * 60)) / 1000);
        // Display the result in the element with id="demo"
        document.getElementsByClassName("tab")[0].getElementsByClassName("tablinks")[3].innerHTML = "Password: " +minutes + "m " + seconds + "s ";

        // If the count down is finished, write some text
        if (distance < 0) {
          clearInterval(x);
          self.passwordExpired();
          self.setStatus('passwordStatus','Your password has expired.');
        }
      }, 500)
    },

  passwordExpired : function(){
  		var self = this;
			document.getElementsByClassName("tab")[0].getElementsByClassName("tablinks")[3].innerHTML = "Password: Expired";
      document.getElementById('password').disabled = false;
      document.getElementById('password').value = "";
      document.getElementById('verifypassword').disabled = false;
      document.getElementById('verifypassword').value = "";
      self.disableAddButtons();
      self.disableShowButtons();
  },

  disableShowButtons : function(){
  		document.getElementById('showName').disabled = true;
			document.getElementById('showLastname').disabled = true;
			document.getElementById('showEmail').disabled = true;
			document.getElementById('showMobilephone').disabled = true;
			document.getElementById('showDateofbirth').disabled = true;
			document.getElementById('showCountry').disabled = true;
			document.getElementById('showGender').disabled = true;
			document.getElementById('showAll').disabled = true;
  },

  disableRemoveButtons : function(){
  		document.getElementById('removeName').disabled = true;
			document.getElementById('removeLastname').disabled = true;
			document.getElementById('removeEmail').disabled = true;
			document.getElementById('removeMobilephone').disabled = true;
			document.getElementById('removeDateofbirth').disabled = true;
			document.getElementById('removeCountry').disabled = true;
			document.getElementById('removeGender').disabled = true;
			document.getElementById('removeAll').disabled = true;
  },

  enableRemoveButtons : function(){
	  	document.getElementById('removeName').disabled = false;
			document.getElementById('removeLastname').disabled = false;
			document.getElementById('removeEmail').disabled = false;
			document.getElementById('removeMobilephone').disabled = false;
			document.getElementById('removeDateofbirth').disabled = false;
			document.getElementById('removeCountry').disabled = false;
			document.getElementById('removeGender').disabled = false;
			document.getElementById('removeAll').disabled = false;
  },

  enableShowButtons : function(){
	  	document.getElementById('showName').disabled = false;
			document.getElementById('showLastname').disabled = false;
			document.getElementById('showEmail').disabled = false;
			document.getElementById('showMobilephone').disabled = false;
			document.getElementById('showDateofbirth').disabled = false;
			document.getElementById('showCountry').disabled = false;
			document.getElementById('showGender').disabled = false;
			document.getElementById('showAll').disabled = false;
  },

  enableInputbox : function() {
  		document.getElementById('input1').disabled = false;
  		document.getElementById('input2').disabled = false;
  		document.getElementById('input3').disabled = false;
  		document.getElementById('input4').disabled = false;
  		document.getElementById('input5').disabled = false;
  		document.getElementById('input6').disabled = false;
  },

  enableAddButtons : function(){
			document.getElementById('addCountry').disabled = false;
			document.getElementById('addGender').disabled = false;
  },

  disableAddButtons : function(){
  		document.getElementById('addName').disabled = true;
			document.getElementById('addLastname').disabled = true;
			document.getElementById('addEmail').disabled = true;
			document.getElementById('addMobilephone').disabled = true;
			document.getElementById('addDateofbirth').disabled = true;
			document.getElementById('addCountry').disabled = true;
			document.getElementById('addGender').disabled = true;
  },

 getOtherContract : function() {
 	IdentityProject.setProvider(web3.currentProvider);

 		var ABI = JSON.parse('[{"constant":false,"inputs":[{"name":"key","type":"bytes32"}],"name":"removeAttribute","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"key","type":"bytes32"}],"name":"getAttribute","outputs":[{"name":"","type":"string"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"key","type":"bytes32"},{"name":"attribute","type":"string"}],"name":"addAttribute","outputs":[],"payable":false,"type":"function"}]');
 		var contractAddress = '0x3481d3c13c59901cdbed4be342bad8da6c051e2a';
    var greeter = web3.eth.contract(ABI).at(contractAddress);
    console.log(greeter.getAttribute('0x3481d3c13c59901cdbed4be342bad8da6c051e2a'));
    	
 },


start: function() {
  var self = this;
  	//self.getOtherContract();
    // Bootstrap the MetaCoin abstraction for Use.
    IdentityProject.setProvider(web3.currentProvider);
       
    // Get the initial account balance so it can be displayed.
    web3.eth.getAccounts(function(err, accs) {
      if (err != null) {
        alert("There was an error fetching your accounts.");
        //document.getElementById('password').disabled = true;
        //document.getElementById('verifypassword').disabled = true;
        return;
      }

      if (accs.length == 0) {
      	document.getElementById('password').disabled = true;
        document.getElementById('verifypassword').disabled = true;
        alert("Couldn't get any accounts! Make sure your Ethereum client is configured correctly.");
        return;
      }
      
      //var password = prompt("Please, enter your password");

      //web3.personal.unlockAccount(web3.eth.coinbase,password,15000);


      //console.log(web3.fromWei(web3.eth.getBalance('0xF4D8e706CfB25c0DECBbDd4D2E2Cc10C66376a3F').toString()));

      var address = document.getElementById("address");
      address.innerHTML = "Your address is: " + web3.eth.coinbase;

      self.updateBalance();
      //var balance = document.getElementById("balance");
      //balance.innerHTML = "Your current balance is: " + web3.fromWei(web3.eth.getBalance(web3.eth.coinbase).toString()) + " Ether";

      accounts = accs;
      account = accounts[0];
      
    });
  },

  updateBalance : function(){
		IdentityProject.setProvider(web3.currentProvider);
       
    // Get the initial account balance so it can be displayed.
    web3.eth.getAccounts(function(err, accs) {
      var balance = document.getElementById("balance");
      balance.innerHTML = "Your current balance is: " + web3.fromWei(web3.eth.getBalance(this.account).toString()) + " Ether";
  });
  },

  checkPassword : function(message){
    var self = this;
    var input = document.getElementById(message).value;
    var patron = /^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z]{10,}$/;
    

    if(!patron.test(input)) {
      document.getElementById('passwordButton').disabled = true;
      
    }else if(keccak_256(document.getElementById('password').value) !== keccak_256(document.getElementById('verifypassword').value)) {
      document.getElementById('passwordButton').disabled = true;
      self.setStatus('passwordStatus','Sorry. Your passwords do not match. Please check and try again.');
    }else{
  		document.getElementById('passwordButton').disabled = false;
      self.setStatus('passwordStatus','');

    }
  },

  checkEmail : function(message){

    var self = this;
    var input = document.getElementById(message).value;
    var patron = /^([a-z]+[a-z1-9._-]*)@{1}([a-z1-9\.]{2,})\.([a-z]{2,3})$/;

    if(!patron.test(input) ){
        document.getElementById('addEmail').disabled = true;
    }else{
        document.getElementById('addEmail').disabled = false;
    }
  },

  checkPhone : function(message){

    var self = this;
    var input = document.getElementById(message).value;
    var patron = /^[0-9\-\+]{6,15}$/;

    if(!patron.test(input)){
        document.getElementById('addMobilephone').disabled = true;
    }else{
        document.getElementById('addMobilephone').disabled = false;
    }
  },

  checkKey: function(message,input) {

   var receiver = document.getElementById(input).value;

    if(receiver.length > 1){
    document.getElementById(message).disabled = false;   
    }else{
    document.getElementById(message).disabled = true;
    }
  },

  checkDate: function(input) {

    var self = this;
    var receiver = document.getElementById(input).value;
    var patron = /^\d{2}[/]\d{2}[/]\d{4}$/;
    console.log(receiver);
    var array = receiver.split("/");
    var dt = new Date();
    var year = array[array.length - 1];
    var month = array[array.length - 2];
    var day = array[array.length - 3];

    if (!patron.test(receiver) || parseInt(year) < 1900 || parseInt(year) > dt.getFullYear()-18 || parseInt(day) < 1  || parseInt(day) > 31 || parseInt(month) < 1 || parseInt(month) > 12){
      //self.setStatus("Please enter a valid date.");
      document.getElementById('addDateofbirth').disabled = true;
    }else{
      //self.setStatus("");
      document.getElementById('addDateofbirth').disabled = false;
    }
  },

  setStatus: function(stat, message) {
    var status = document.getElementById(stat);
    status.innerHTML = message;
  },

  check : function(message) {

    IdentityProject.deployed().then(function(contractInstance){
      contractInstance.checkProof(message).then(function(v){
        if(v.toString() == "Ya existe este string"){
          return true;
        } else {
          return false;
        }
        });
      });
    },

  addAttribute: function(message,input) { 
    // Tengo que deshabilitar el boton cuando le doy a ADD  
    var self = this;
    var receiver = document.getElementById(input).value;
    self.setStatus('addStatus',"Uploading your "+ message + ": " + receiver + "...");

    console.log(message +" "+ receiver);

    console.log(message.toUpperCase());
    console.log(receiver);
    console.log();

 		document.getElementById(input).disabled = true;
 		var addButton = "add"+message.replace(/ /g,'');
    document.getElementById(addButton).disabled = true;  


    var valencrypted = self.cifrador(keccak_256(document.getElementById('password').value),receiver);
    var keyencrypted = "0x"+keccak_256(message.toUpperCase());

    console.log(self.descifrador(keccak_256(document.getElementById('password').value),valencrypted));

    console.log();
    console.log(valencrypted);
    console.log(keyencrypted);

    
   IdentityProject.deployed().then(function(contractInstance) {
      //contractInstance.getAttribute(keyencrypted, {gas: 140000, from: web3.eth.accounts[0]}).then(function(v) {
      
      contractInstance.addAttribute(keyencrypted,valencrypted, {gas: 140000, from: web3.eth.accounts[0]}).then(function(v) {
      	console.log(v);
      	console.log(v.tx);
   	 		self.enableAddButtons();
     		self.setStatus('addStatus',message + ": " + receiver + " "+  "Saved succesfully!");
      	self.updateBalance();       	
				//return contractInstance.checkProof(receiver).then(function(v) 
      //    self.setStatus(v.toString());
      });
    });
    },

  getAttribute : function(message,show) {
  	var self = this;
    
		self.setStatus('manageStatus',"Showing your "+ message + "...");
    
		var keyencrypted = "0x"+keccak_256(message.toUpperCase());

    IdentityProject.deployed().then(function(contractInstance) {
      contractInstance.getAttribute(keyencrypted, {gas: 140000, from: web3.eth.accounts[0]}).then(function(v) {

      	var removeButton = "remove"+message.replace(/ /g,'');
    		
      	if(v === "Attribute does not exist."){
      		document.getElementById(show).value = v;
      		document.getElementById(removeButton).disabled = true;
      		return 0;
      	}else if(self.cifrador(keccak_256(document.getElementById('password').value),self.descifrador(keccak_256(document.getElementById('password').value),v)) !== v) {
      		self.setStatus('manageStatus','Please, enter the correct password.');
      		document.getElementById(show).value = "Incorrect password";
     		  document.getElementById(removeButton).disabled = true;
     		  return 1;
      		
	    	}else{
	    		document.getElementById(show).value = self.descifrador(keccak_256(document.getElementById('password').value),v);
			   // console.log(self.descifrador(keccak_256(document.getElementById('password').value),v));
			    document.getElementById(removeButton).disabled = false;  
			    return 2;

	    	}
      });
    });
  },

  getAllAttributes : function(message,input) {
  	var self = this;
  	self.getAttribute('Name','show1');
  	self.getAttribute('Lastname','show2');
  	self.getAttribute('Email','show3');
  	self.getAttribute('Mobile phone','show4');
  	self.getAttribute('Date of birth','show5');
  	self.getAttribute('Country','show6');
  	self.getAttribute('Gender','show7');
  	self.setStatus('manageStatus',"Showing all your attributes");    
  },

  removeAllAttributes : function(message,input) {
  },

  removeAttribute: function(message,input) { 
  	var self = this;
  	var removeButton = "remove"+message.replace(/ /g,'');
    document.getElementById(removeButton).disabled = true;  
  	
  	//self.disableRemoveButtons();
    var receiver = document.getElementById(input).value;
    self.setStatus('manageStatus',"Removing your "+ message + ": " + receiver + "...");

    var valencrypted = self.cifrador(keccak_256(document.getElementById('password').value),receiver);
    var keyencrypted = "0x"+keccak_256(message.toUpperCase());

   IdentityProject.deployed().then(function(contractInstance) {
      //contractInstance.getAttribute(keyencrypted, {gas: 140000, from: web3.eth.accounts[0]}).then(function(v) {
      
      contractInstance.removeAttribute(keyencrypted, {gas: 140000, from: web3.eth.accounts[0]}).then(function(v) {
      	console.log(v);
      	console.log(v.tx);
     		var receiver = document.getElementById(input).value = "";
     		self.setStatus('manageStatus',message + ": " + receiver + " " + "Removed succesfully!");
      	self.updateBalance();
				//return contractInstance.checkProof(receiver).then(function(v) 
      //    self.setStatus(v.toString());
      });
    });
    }
 };    


window.addEventListener('load', function() {
  // Checking if Web3 has been injected by the browser (Mist/MetaMask)
  if (typeof web3 !== 'undefined') {
    console.warn("Using web3 detected from external source. If you find that your accounts don't appear or you have 0 MetaCoin, ensure you've configured that source properly. If using MetaMask, see the following link. Feel free to delete this warning. :) http://truffleframework.com/tutorials/truffle-and-metamask")
    // Use Mist/MetaMask's provider
    window.web3 = new Web3(web3.currentProvider);
  } else {
    console.warn("No web3 detected. Falling back to http://localhost:8545. You should remove this fallback when you deploy live, as it's inherently insecure. Consider switching to Metamask for development. More info here: http://truffleframework.com/tutorials/truffle-and-metamask");
    // fallback - use your fallback strategy (local node / hosted node + in-dapp id mgmt / fail)
    window.web3 = new Web3(new Web3.providers.HttpProvider("http://localhost:8545"));
  }

  App.start();
});
